// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ParticleMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct ParticleData
{
    float3 position;
    float4 color;
};

RWStructuredBuffer<ParticleData> ParticleBuffer;
float Time;


[numthreads(10,10,10)]
void ParticleMain(uint3 id : SV_DispatchThreadID, uint3 groudID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID, int index : SV_GroupIndex)
{
    int index1 = groupThreadID.z * 10 * 10 + groupThreadID.y * 10 + groupThreadID.x + groudID.x * 1000 + groudID.y + groudID.z;
    int index2 = index + groudID.x * 1000 + groudID.y + groudID.z;

	int pindex = index1;

	float x = sin(index);
	float y = sin(index * 1.2f);
	float3 forward = float3(x, y, -sqrt(1 - x * x - y * y));
	ParticleBuffer[pindex].color = float4(forward.x, forward.y, cos(index) * 0.5f + 0.5, 1);
	if (Time > groudID.x)
		ParticleBuffer[pindex].position += forward * 0.005f;
}
